trigger:
- main

variables:
- group: Variables
- name: subscription
  value: 'AzureCloud'

pool:
  vmImage: ubuntu-latest

stages:
- stage: Plan
  displayName: Plan

  jobs: 
    - job: Plan
      steps:

      - task: AzureCLI@2
        displayName: Terraform init
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'terraform init -backend-config="resource_group_name=Services" -backend-config="storage_account_name=intvservicestorageacc" -backend-config="container_name=terraform" -backend-config="key=dev.tfstate" -backend-config="access_key=$(access_key)"'

      - task: AzureCLI@2
        displayName: Terraform plan
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'terraform plan -var="subscription_id=$(subscription_id)" -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="object_id=$(object_id)" -var="tenant_id=$(tenant_id)" -var="company=intvsn" -var="client=lab" -var="environment=dev" -var="location=westeurope" -var="aks_cluster_name=wordpress"'

- stage: Build
  displayName: Build

  jobs:
    - deployment: publishinternal
      displayName: 'Approval'
      environment: 'dev'

    - job: Build
      steps:

      - task: AzureCLI@2
        displayName: Terraform init
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'terraform init -backend-config="resource_group_name=Services" -backend-config="storage_account_name=intvservicestorageacc" -backend-config="container_name=terraform" -backend-config="key=dev.tfstate" -backend-config="access_key=$(access_key)"'

      - task: AzureCLI@2
        displayName: Terraform apply
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'terraform apply -auto-approve -var="subscription_id=$(subscription_id)" -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="object_id=$(object_id)" -var="tenant_id=$(tenant_id)" -var="company=intvsn" -var="client=lab" -var="environment=dev" -var="location=westeurope" -var="aks_cluster_name=wordpress"'

- stage: Destroying
  displayName: Destroying
        
  jobs:
    - deployment: publishinternal
      displayName: 'Approval'
      environment: 'dev'
        
    - job: Destroying
      steps:
      - task: AzureCLI@2
        displayName: Terraform init
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'terraform init -backend-config="resource_group_name=Services" -backend-config="storage_account_name=intvservicestorageacc" -backend-config="container_name=terraform" -backend-config="key=dev.tfstate" -backend-config="access_key=$(access_key)"'

      - task: AzureCLI@2
        displayName: Firewall update
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
              $ip_address = curl http://ipv4.icanhazip.com
              $query = "[?ends_with(name, 'dev')].name"
              $keyvaultname = az keyvault list --query $query --output tsv
              az keyvault network-rule add --name $keyvaultname --ip-address $ip_address

      - task: AzureCLI@2
        displayName: Terraform destroy
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'terraform destroy -auto-approve -var="subscription_id=$(subscription_id)" -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="object_id=$(object_id)" -var="tenant_id=$(tenant_id)" -var="company=intvsn" -var="client=lab" -var="environment=dev" -var="location=westeurope" -var="aks_cluster_name=wordpress"'